import React, { useState,useEffect } from "react";
import {
  Grid,
  Paper,
  Typography,
  Box,
  Button,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  IconButton,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  TextField,
  MenuItem,
} from "@mui/material";
import { Visibility, Edit, Delete } from "@mui/icons-material";

const App = () => {
  const [users, setUsers] = useState(()=>{
  const savedUsers = localStorage.getItem("users");
  return savedUsers ? JSON.parse(savedUsers) : [];
});
  const [open, setOpen] = useState(false);
  const [isEditMode, setIsEditMode] = useState(false);
  const [currentUser, setCurrentUser] = useState(null);
  const [formValues, setFormValues] = useState({
    firstName: "",
    lastName: "",
    email: "",
    phone: "",
    address: "",
    city: "",
    state: "",
    country: "India",
  });
  const [errors, setErrors] = useState({});
  useEffect(() => {
    localStorage.setItem("users", JSON.stringify(users));
  }, [users]);
  
  const validate = () => {
    let tempErrors = {};
    tempErrors.firstName = formValues.firstName ? "" : "First Name is required";
    tempErrors.lastName = formValues.lastName ? "" : "Last Name is required";
    tempErrors.email = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formValues.email)
      ? ""
      : "Email is required";
    tempErrors.phone = /^[0-9]{10}$/.test(formValues.phone)
      ? ""
      : "Phone must be 10 digits";
    tempErrors.address = formValues.address ? "" : "Address is required";
    tempErrors.city = formValues.city ? "" : "City is required";
    tempErrors.state = formValues.state ? "" : "State is required";
    tempErrors.country = formValues.country ? "" : "Country is required";
    setErrors(tempErrors);
    return Object.values(tempErrors).every((x) => x === "");
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormValues({
      ...formValues,
      [name]: value,
    });
  };
  const handleFocus = e => {
    const{name}=e.target;
    setErrors({
      ...errors,
      [name] : "",
    });
  };

  // const handleBlur = () => {
  //   validate();
  // };

  const handleAddEditUser = () => {
    if (validate()) {
      if (isEditMode) {
        setUsers(
          users.map((user, index) =>
            index === currentUser ? { ...formValues } : user
          )
        );
      } else {
        setUsers([...users, { ...formValues }]);
      }
      handleClose();
    }
  };
  const[viewonly,setviewonly]=useState(false);
  const handleOpen = (user = null, index = null,isviewmode=false) => {
    setIsEditMode(!!user && !isviewmode);
    setviewonly(isviewmode);
    setCurrentUser(index);
    setFormValues(
      user || {
        firstName: "",
        lastName: "",
        email: "",
        phone: "",
        address: "",
        city: "",
        state: "",
        country: "India",
      }
    );
    setErrors({});
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
    setCurrentUser(null);
    setFormValues({
      firstName: "",
      lastName: "",
      email: "",
      phone: "",
      address: "",
      city: "",
      state: "",
      country: "India",
    });
    setErrors({});
  };

  const handleDelete = (index) => {
    setUsers(users.filter((_, i) => i !== index));
  };

  return (
    <Box sx={{ padding: 3 }}>
      <Typography variant="h4" gutterBottom>
      </Typography>
      <Button
        variant="contained"
        color="primary"
        onClick={() => handleOpen()}
        sx={{ marginBottom: 2 }}
      >
        Add User
      </Button>

      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>First Name</TableCell>
              <TableCell>Last Name</TableCell>
              <TableCell>Email ID</TableCell>
              <TableCell>Phone No</TableCell>
              <TableCell>Address</TableCell>
              <TableCell>City</TableCell>
              <TableCell>State</TableCell>
              <TableCell>Country</TableCell>
              <TableCell>Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {users.map((user, index) => (
              <TableRow key={index}>
                <TableCell>{user.firstName}</TableCell>
                <TableCell>{user.lastName}</TableCell>
                <TableCell>{user.email}</TableCell>
                <TableCell>{user.phone}</TableCell>
                <TableCell>{user.address}</TableCell>
                <TableCell>{user.city}</TableCell>
                <TableCell>{user.state}</TableCell>
                <TableCell>{user.country}</TableCell>
                <TableCell>
                  <IconButton
                    onClick={() => handleOpen(user, index,true)}
                    color="info"
                  >
                    <Visibility />
                  </IconButton>
                  <IconButton
                    onClick={() => handleOpen(user, index)}
                    color="primary"
                  >
                    <Edit />
                  </IconButton>
                  <IconButton onClick={() => handleDelete(index)} color="error">
                    <Delete />
                  </IconButton>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>

      <Dialog open={open} onClose={handleClose}>
        <DialogTitle>{isEditMode ? "Edit User" : "Add User"}</DialogTitle>
        <DialogContent>
          <Grid container spacing={2}>
            <Grid item xs={6}>
              <TextField
                label="First Name"
                name="firstName"
                fullWidth
                value={formValues.firstName}
                onChange={handleChange}
                onFocus={handleFocus}
                // onBlur={handleBlur} 
                error={!!errors.firstName}
                helperText={errors.firstName}
              />
            </Grid>
            <Grid item xs={6}>
              <TextField
                label="Last Name"
                name="lastName"
                fullWidth
                value={formValues.lastName}
                onChange={handleChange}
                onFocus={handleFocus}
                // onBlur={handleBlur} 
                error={!!errors.lastName}
                helperText={errors.lastName}
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                label="Email ID"
                name="email"
                fullWidth
                value={formValues.email}
                onChange={handleChange}
                onFocus={handleFocus}
                // onBlur={handleBlur} 
                error={!!errors.email}
                helperText={errors.email}
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                label="Phone No"
                name="phone"
                fullWidth
                value={formValues.phone}
                onChange={handleChange}
                onFocus={handleFocus}
                // onBlur={handleBlur} 
                error={!!errors.phone}
                helperText={errors.phone}
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                label="Address"
                name="address"
                fullWidth
                value={formValues.address}
                onChange={handleChange}
                onFocus={handleFocus}
                // onBlur={handleBlur}
                error={!!errors.address}
                helperText={errors.address}
              />
            </Grid>
            <Grid item xs={4}>
              <TextField
                label="City"
                name="city"
                fullWidth
                value={formValues.city}
                onChange={handleChange}
                onFocus={handleFocus}
                // onBlur={handleBlur} 
                error={!!errors.city}
                helperText={errors.city}
              />
            </Grid>
            <Grid item xs={4}>
              <TextField
                label="State"
                name="state"
                fullWidth
                value={formValues.state}
                onChange={handleChange}
                onFocus={handleFocus}
                // onBlur={handleBlur} 
                error={!!errors.state}
                helperText={errors.state}
              />
            </Grid>
            <Grid item xs={4}>
              <TextField
                label="Country"
                name="country"
                fullWidth
                select
                value={formValues.country}
                onChange={handleChange}
                onFocus={handleFocus}
                // onBlur={handleBlur} 
                error={!!errors.country}
                helperText={errors.country}
              >
                {["India"].map((country) => (
                  <MenuItem key={country} value={country}>
                    {country}
                  </MenuItem>
                ))}
              </TextField>
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClose} color="secondary">
            Cancel
          </Button>
          {!viewonly &&( 
          <Button onClick={handleAddEditUser} color="primary">
            {isEditMode ? "Update" : "Add"}
          </Button>
          )} 
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default App;


