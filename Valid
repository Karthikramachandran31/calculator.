import React, { useState, useEffect } from "react";
import {
  Grid,
  Paper,
  Typography,
  Box,
  Button,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  IconButton,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  TextField,
  MenuItem,
} from "@mui/material";
import { Visibility, Edit, Delete } from "@mui/icons-material";

const App = () => {
  const [users, setUsers] = useState(() => {
    const savedUsers = localStorage.getItem("users");
    return savedUsers ? JSON.parse(savedUsers) : [];
  });

  const [open, setOpen] = useState(false);
  const [isEditMode, setIsEditMode] = useState(false);
  const [currentUserId, setCurrentUserId] = useState(null);
  const [searchId, setSearchId] = useState(""); // New field to search by ID
  const [formValues, setFormValues] = useState({
    id: "",
    firstName: "",
    lastName: "",
    email: "",
    phone: "",
    address: "",
    city: "",
    state: "",
    country: "India",
  });
  const [errors, setErrors] = useState({});
  const [viewOnly, setViewOnly] = useState(false);

  useEffect(() => {
    localStorage.setItem("users", JSON.stringify(users));
  }, [users]);

  const validate = () => {
    let tempErrors = {};
    tempErrors.firstName = formValues.firstName ? "" : "First Name is required";
    tempErrors.lastName = formValues.lastName ? "" : "Last Name is required";
    tempErrors.email = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formValues.email)
      ? ""
      : "Email is required";
    tempErrors.phone = /^[0-9]{10}$/.test(formValues.phone)
      ? ""
      : "Phone must be 10 digits";
    tempErrors.address = formValues.address ? "" : "Address is required";
    tempErrors.city = formValues.city ? "" : "City is required";
    tempErrors.state = formValues.state ? "" : "State is required";
    tempErrors.country = formValues.country ? "" : "Country is required";
    setErrors(tempErrors);
    return Object.values(tempErrors).every((x) => x === "");
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormValues({
      ...formValues,
      [name]: value,
    });
  };

  const handleFocus = (e) => {
    const { name } = e.target;
    setErrors({
      ...errors,
      [name]: "",
    });
  };

  const handleAddEditUser = () => {
    if (validate()) {
      if (isEditMode) {
        setUsers(
          users.map((user) =>
            user.id === currentUserId ? { ...formValues } : user
          )
        );
      } else {
        setUsers([
          ...users,
          { ...formValues, id: Date.now().toString() }, // Assign unique ID
        ]);
      }
      handleClose();
    }
  };

  const handleOpen = (user = null, isViewMode = false) => {
    setIsEditMode(!!user && !isViewMode);
    setViewOnly(isViewMode);
    setCurrentUserId(user?.id || null);
    setFormValues(
      user || {
        id: "",
        firstName: "",
        lastName: "",
        email: "",
        phone: "",
        address: "",
        city: "",
        state: "",
        country: "India",
      }
    );
    setErrors({});
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
    setCurrentUserId(null);
    setFormValues({
      id: "",
      firstName: "",
      lastName: "",
      email: "",
      phone: "",
      address: "",
      city: "",
      state: "",
      country: "India",
    });
    setErrors({});
  };

  const handleDelete = (id) => {
    setUsers(users.filter((user) => user.id !== id));
  };

  const handleSearchById = () => {
    const user = users.find((u) => u.id === searchId);
    if (user) {
      handleOpen(user);
    } else {
      alert("User not found");
    }
  };

  return (
    <Box sx={{ padding: 3 }}>
      <Typography variant="h4" gutterBottom>
        User Management
      </Typography>

      {/* Add and Search by ID */}
      <Box sx={{ display: "flex", marginBottom: 2 }}>
        <Button
          variant="contained"
          color="primary"
          onClick={() => handleOpen()}
          sx={{ marginRight: 2 }}
        >
          Add User
        </Button>
        <TextField
          label="Search by ID"
          value={searchId}
          onChange={(e) => setSearchId(e.target.value)}
          sx={{ marginRight: 2 }}
        />
        <Button variant="contained" color="info" onClick={handleSearchById}>
          Search
        </Button>
      </Box>

      {/* User Table */}
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>ID</TableCell>
              <TableCell>First Name</TableCell>
              <TableCell>Last Name</TableCell>
              <TableCell>Email ID</TableCell>
              <TableCell>Phone No</TableCell>
              <TableCell>Address</TableCell>
              <TableCell>City</TableCell>
              <TableCell>State</TableCell>
              <TableCell>Country</TableCell>
              <TableCell>Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {users.map((user) => (
              <TableRow key={user.id}>
                <TableCell>{user.id}</TableCell>
                <TableCell>{user.firstName}</TableCell>
                <TableCell>{user.lastName}</TableCell>
                <TableCell>{user.email}</TableCell>
                <TableCell>{user.phone}</TableCell>
                <TableCell>{user.address}</TableCell>
                <TableCell>{user.city}</TableCell>
                <TableCell>{user.state}</TableCell>
                <TableCell>{user.country}</TableCell>
                <TableCell>
                  <IconButton
                    onClick={() => handleOpen(user, true)}
                    color="info"
                  >
                    <Visibility />
                  </IconButton>
                  <IconButton onClick={() => handleOpen(user)} color="primary">
                    <Edit />
                  </IconButton>
                  <IconButton
                    onClick={() => handleDelete(user.id)}
                    color="error"
                  >
                    <Delete />
                  </IconButton>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>

      {/* Dialog */}
      <Dialog open={open} onClose={handleClose}>
        <DialogTitle>{isEditMode ? "Edit User" : "Add User"}</DialogTitle>
        <DialogContent>
          <Grid container spacing={2}>
            {/* Form Fields */}
            {/* ... Form fields remain the same ... */}
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClose} color="secondary">
            Cancel
          </Button>
          {!viewOnly && (
            <Button onClick={handleAddEditUser} color="primary">
              {isEditMode ? "Update" : "Add"}
            </Button>
          )}
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default App;
